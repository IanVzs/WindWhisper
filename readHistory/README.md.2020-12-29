# 风语
将信息发送到每处, 接受每一处的结果, 返回最喜欢的那一处. 并支持获取其余处结果的可能性.

## 队列
想要更改为 tools, worker协作的模式, 本体就作为一个队列以及状态库

## 工作模式
收到消息, 塞入消息队列,分配任务编号
workers 从消息队列中拿到, 将处理结果放到内存库,修改状态已完成
根据编号获取结果, 返回

## 说明
未经实际项目测试, 暂依然在探索试验阶段.

## 核心思想
将API和业务逻辑完全抽离, API只做接口和数据库的操作, 即一堆增删改查. 而业务逻辑则独立出, 与API通过异步的方式进行协作.

### 同步方式
API将数据丢在"快递柜"中后原地等待服务返回. 如果对于接口返回速度要求高, 则在等待一些秒之后放弃等待, 返回服务错误.

1. 或许需要通知服务可以中止了
2. 必然这里需要放置报警服务, 以及反馈服务. 当出现这种情况时根据系统情况多开服务进程或者杀掉有问题的进程, 通知报警等.

### "快递柜"
给API和业务服务之间递东西

1. 内存满了, 则放弃服务API新请求
2. 1中所说应该合情合理, 没啥问题
3. 自己提供方法给API和服务, 统一管理收发存储, 空间申请和分配

### 服务
处理具体业务逻辑

1. 需要可以接收关闭信号;
2. 原生支持并发可拓展;


# TODO timeline

## 天气预警
1. 处理完后入库, 方便日后分析和按用户推送
2. 写死几个测试用户
3. 先做简单扫描推送. 完成后可处理其它事情

## RSS信息推送
1. 同天气预警, 先对接某个RSS固定推送, 随后可干其余事情
2. 增加用户自定义传入RSS源, 进行个性化推送

## 用户系统
1. 用户表实现, 表中无敏感信息, 只存储登录联系方式(依然不存入敏感通讯方式信息)等主干信息即可
2. 关联城市表
3. 撤离, 处理其他事情

## 文字识别
1. 现有ocr先处理成可调用子服务, 提供给用户使用
2. 公众号接受图片, 可返回识别文字
3. 若简单, 解决服务被杀问题, 处理后续事情

## 打分处理系统
1. 拆分服务为全异步, 选用队列服务
2. 生产者写入事件和诉求, 消费者处理
3. 若无其余优先, 则加入打分系统作为中间服务.接收诉求, 寻求处理者. 寻求高分进行反馈回复.
4. 首次接受立即回复, 其余处理者反馈进行评估入库. 若分数高则下次采用, 除非第二次其余处理者分高速度快

##  暂无
pass
